{"ast":null,"code":"import{unicodeSplit}from'./words';export var getStatuses=function getStatuses(solution,guesses){var charObj={};var splitSolution=unicodeSplit(solution);guesses.forEach(function(word){unicodeSplit(word).forEach(function(letter,i){if(!splitSolution.includes(letter)){// make status absent\nreturn charObj[letter]='absent';}if(letter===splitSolution[i]){//make status correct\nreturn charObj[letter]='correct';}if(charObj[letter]!=='correct'){//make status present\nreturn charObj[letter]='present';}});});return charObj;};export var getGuessStatuses=function getGuessStatuses(solution,guess){var splitSolution=unicodeSplit(solution);var splitGuess=unicodeSplit(guess);var solutionCharsTaken=splitSolution.map(function(_){return false;});var statuses=Array.from(Array(guess.length));// handle all correct cases first\nsplitGuess.forEach(function(letter,i){if(letter===splitSolution[i]){statuses[i]='correct';solutionCharsTaken[i]=true;return;}});splitGuess.forEach(function(letter,i){if(statuses[i])return;if(!splitSolution.includes(letter)){// handles the absent case\nstatuses[i]='absent';return;}// now we are left with \"present\"s\nvar indexOfPresentChar=splitSolution.findIndex(function(x,index){return x===letter&&!solutionCharsTaken[index];});if(indexOfPresentChar>-1){statuses[i]='present';solutionCharsTaken[indexOfPresentChar]=true;return;}else{statuses[i]='absent';return;}});return statuses;};","map":{"version":3,"sources":["/Users/ntwrkman/Desktop/react-wordle/src/lib/statuses.ts"],"names":["unicodeSplit","getStatuses","solution","guesses","charObj","splitSolution","forEach","word","letter","i","includes","getGuessStatuses","guess","splitGuess","solutionCharsTaken","map","_","statuses","Array","from","length","indexOfPresentChar","findIndex","x","index"],"mappings":"AAAA,OAASA,YAAT,KAA6B,SAA7B,CAIA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CACzBC,QADyB,CAEzBC,OAFyB,CAGS,CAClC,GAAMC,CAAAA,OAAsC,CAAG,EAA/C,CACA,GAAMC,CAAAA,aAAa,CAAGL,YAAY,CAACE,QAAD,CAAlC,CAEAC,OAAO,CAACG,OAAR,CAAgB,SAACC,IAAD,CAAU,CACxBP,YAAY,CAACO,IAAD,CAAZ,CAAmBD,OAAnB,CAA2B,SAACE,MAAD,CAASC,CAAT,CAAe,CACxC,GAAI,CAACJ,aAAa,CAACK,QAAd,CAAuBF,MAAvB,CAAL,CAAqC,CACnC;AACA,MAAQJ,CAAAA,OAAO,CAACI,MAAD,CAAP,CAAkB,QAA1B,CACD,CAED,GAAIA,MAAM,GAAKH,aAAa,CAACI,CAAD,CAA5B,CAAiC,CAC/B;AACA,MAAQL,CAAAA,OAAO,CAACI,MAAD,CAAP,CAAkB,SAA1B,CACD,CAED,GAAIJ,OAAO,CAACI,MAAD,CAAP,GAAoB,SAAxB,CAAmC,CACjC;AACA,MAAQJ,CAAAA,OAAO,CAACI,MAAD,CAAP,CAAkB,SAA1B,CACD,CACF,CAfD,EAgBD,CAjBD,EAmBA,MAAOJ,CAAAA,OAAP,CACD,CA3BM,CA6BP,MAAO,IAAMO,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAC9BT,QAD8B,CAE9BU,KAF8B,CAGb,CACjB,GAAMP,CAAAA,aAAa,CAAGL,YAAY,CAACE,QAAD,CAAlC,CACA,GAAMW,CAAAA,UAAU,CAAGb,YAAY,CAACY,KAAD,CAA/B,CAEA,GAAME,CAAAA,kBAAkB,CAAGT,aAAa,CAACU,GAAd,CAAkB,SAACC,CAAD,QAAO,MAAP,EAAlB,CAA3B,CAEA,GAAMC,CAAAA,QAAsB,CAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACN,KAAK,CAACQ,MAAP,CAAhB,CAA/B,CAEA;AACAP,UAAU,CAACP,OAAX,CAAmB,SAACE,MAAD,CAASC,CAAT,CAAe,CAChC,GAAID,MAAM,GAAKH,aAAa,CAACI,CAAD,CAA5B,CAAiC,CAC/BQ,QAAQ,CAACR,CAAD,CAAR,CAAc,SAAd,CACAK,kBAAkB,CAACL,CAAD,CAAlB,CAAwB,IAAxB,CACA,OACD,CACF,CAND,EAQAI,UAAU,CAACP,OAAX,CAAmB,SAACE,MAAD,CAASC,CAAT,CAAe,CAChC,GAAIQ,QAAQ,CAACR,CAAD,CAAZ,CAAiB,OAEjB,GAAI,CAACJ,aAAa,CAACK,QAAd,CAAuBF,MAAvB,CAAL,CAAqC,CACnC;AACAS,QAAQ,CAACR,CAAD,CAAR,CAAc,QAAd,CACA,OACD,CAED;AACA,GAAMY,CAAAA,kBAAkB,CAAGhB,aAAa,CAACiB,SAAd,CACzB,SAACC,CAAD,CAAIC,KAAJ,QAAcD,CAAAA,CAAC,GAAKf,MAAN,EAAgB,CAACM,kBAAkB,CAACU,KAAD,CAAjD,EADyB,CAA3B,CAIA,GAAIH,kBAAkB,CAAG,CAAC,CAA1B,CAA6B,CAC3BJ,QAAQ,CAACR,CAAD,CAAR,CAAc,SAAd,CACAK,kBAAkB,CAACO,kBAAD,CAAlB,CAAyC,IAAzC,CACA,OACD,CAJD,IAIO,CACLJ,QAAQ,CAACR,CAAD,CAAR,CAAc,QAAd,CACA,OACD,CACF,CAtBD,EAwBA,MAAOQ,CAAAA,QAAP,CACD,CA7CM","sourcesContent":["import { unicodeSplit } from './words'\n\nexport type CharStatus = 'absent' | 'present' | 'correct'\n\nexport const getStatuses = (\n  solution: string,\n  guesses: string[]\n): { [key: string]: CharStatus } => {\n  const charObj: { [key: string]: CharStatus } = {}\n  const splitSolution = unicodeSplit(solution)\n\n  guesses.forEach((word) => {\n    unicodeSplit(word).forEach((letter, i) => {\n      if (!splitSolution.includes(letter)) {\n        // make status absent\n        return (charObj[letter] = 'absent')\n      }\n\n      if (letter === splitSolution[i]) {\n        //make status correct\n        return (charObj[letter] = 'correct')\n      }\n\n      if (charObj[letter] !== 'correct') {\n        //make status present\n        return (charObj[letter] = 'present')\n      }\n    })\n  })\n\n  return charObj\n}\n\nexport const getGuessStatuses = (\n  solution: string,\n  guess: string\n): CharStatus[] => {\n  const splitSolution = unicodeSplit(solution)\n  const splitGuess = unicodeSplit(guess)\n\n  const solutionCharsTaken = splitSolution.map((_) => false)\n\n  const statuses: CharStatus[] = Array.from(Array(guess.length))\n\n  // handle all correct cases first\n  splitGuess.forEach((letter, i) => {\n    if (letter === splitSolution[i]) {\n      statuses[i] = 'correct'\n      solutionCharsTaken[i] = true\n      return\n    }\n  })\n\n  splitGuess.forEach((letter, i) => {\n    if (statuses[i]) return\n\n    if (!splitSolution.includes(letter)) {\n      // handles the absent case\n      statuses[i] = 'absent'\n      return\n    }\n\n    // now we are left with \"present\"s\n    const indexOfPresentChar = splitSolution.findIndex(\n      (x, index) => x === letter && !solutionCharsTaken[index]\n    )\n\n    if (indexOfPresentChar > -1) {\n      statuses[i] = 'present'\n      solutionCharsTaken[indexOfPresentChar] = true\n      return\n    } else {\n      statuses[i] = 'absent'\n      return\n    }\n  })\n\n  return statuses\n}\n"]},"metadata":{},"sourceType":"module"}