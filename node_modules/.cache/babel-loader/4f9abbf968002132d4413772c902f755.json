{"ast":null,"code":"var _jsxFileName = \"/Users/ntwrkman/Desktop/react-wordle/src/context/AlertContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useCallback, useContext, useState } from 'react';\nimport { ALERT_TIME_MS } from '../constants/settings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AlertContext = /*#__PURE__*/createContext({\n  status: 'success',\n  message: null,\n  isVisible: false,\n  showSuccess: () => null,\n  showError: () => null\n});\nAlertContext.displayName = 'AlertContext';\nexport const useAlert = () => {\n  _s();\n\n  return useContext(AlertContext);\n};\n\n_s(useAlert, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const AlertProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [status, setStatus] = useState('success');\n  const [message, setMessage] = useState(null);\n  const [isVisible, setIsVisible] = useState(false);\n  const show = useCallback((showStatus, newMessage, options) => {\n    const {\n      delayMs = 0,\n      persist,\n      onClose,\n      durationMs = ALERT_TIME_MS\n    } = options || {};\n    setTimeout(() => {\n      setStatus(showStatus);\n      setMessage(newMessage);\n      setIsVisible(true);\n\n      if (!persist) {\n        setTimeout(() => {\n          setIsVisible(false);\n\n          if (onClose) {\n            onClose();\n          }\n        }, durationMs);\n      }\n    }, delayMs);\n  }, [setStatus, setMessage, setIsVisible]);\n  const showError = useCallback((newMessage, options) => {\n    show('error', newMessage, options);\n  }, [show]);\n  const showSuccess = useCallback((newMessage, options) => {\n    show('success', newMessage, options);\n  }, [show]);\n  return /*#__PURE__*/_jsxDEV(AlertContext.Provider, {\n    value: {\n      status,\n      message,\n      isVisible,\n      showError,\n      showSuccess\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(AlertProvider, \"PebM8JatpdPKW9TW6W0EwJ1mHuw=\");\n\n_c = AlertProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlertProvider\");","map":{"version":3,"sources":["/Users/ntwrkman/Desktop/react-wordle/src/context/AlertContext.tsx"],"names":["createContext","useCallback","useContext","useState","ALERT_TIME_MS","AlertContext","status","message","isVisible","showSuccess","showError","displayName","useAlert","AlertProvider","children","setStatus","setMessage","setIsVisible","show","showStatus","newMessage","options","delayMs","persist","onClose","durationMs","setTimeout"],"mappings":";;;;AAAA,SACEA,aADF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,QALF,QAMO,OANP;AAOA,SAASC,aAAT,QAA8B,uBAA9B;;AAmBA,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAA2B;AAClEM,EAAAA,MAAM,EAAE,SAD0D;AAElEC,EAAAA,OAAO,EAAE,IAFyD;AAGlEC,EAAAA,SAAS,EAAE,KAHuD;AAIlEC,EAAAA,WAAW,EAAE,MAAM,IAJ+C;AAKlEC,EAAAA,SAAS,EAAE,MAAM;AALiD,CAA3B,CAAlC;AAOPL,YAAY,CAACM,WAAb,GAA2B,cAA3B;AAEA,OAAO,MAAMC,QAAQ,GAAG;AAAA;;AAAA,SAAMV,UAAU,CAACG,YAAD,CAAhB;AAAA,CAAjB;;GAAMO,Q;;AAMb,OAAO,MAAMC,aAAa,GAAG,QAAyB;AAAA;;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;AACpD,QAAM,CAACR,MAAD,EAASS,SAAT,IAAsBZ,QAAQ,CAAc,SAAd,CAApC;AACA,QAAM,CAACI,OAAD,EAAUS,UAAV,IAAwBb,QAAQ,CAAgB,IAAhB,CAAtC;AACA,QAAM,CAACK,SAAD,EAAYS,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMe,IAAI,GAAGjB,WAAW,CACtB,CAACkB,UAAD,EAA0BC,UAA1B,EAA8CC,OAA9C,KAAwE;AACtE,UAAM;AACJC,MAAAA,OAAO,GAAG,CADN;AAEJC,MAAAA,OAFI;AAGJC,MAAAA,OAHI;AAIJC,MAAAA,UAAU,GAAGrB;AAJT,QAKFiB,OAAO,IAAI,EALf;AAOAK,IAAAA,UAAU,CAAC,MAAM;AACfX,MAAAA,SAAS,CAACI,UAAD,CAAT;AACAH,MAAAA,UAAU,CAACI,UAAD,CAAV;AACAH,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAI,CAACM,OAAL,EAAc;AACZG,QAAAA,UAAU,CAAC,MAAM;AACfT,UAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,cAAIO,OAAJ,EAAa;AACXA,YAAAA,OAAO;AACR;AACF,SALS,EAKPC,UALO,CAAV;AAMD;AACF,KAbS,EAaPH,OAbO,CAAV;AAcD,GAvBqB,EAwBtB,CAACP,SAAD,EAAYC,UAAZ,EAAwBC,YAAxB,CAxBsB,CAAxB;AA2BA,QAAMP,SAAS,GAAGT,WAAW,CAC3B,CAACmB,UAAD,EAAqBC,OAArB,KAA+C;AAC7CH,IAAAA,IAAI,CAAC,OAAD,EAAUE,UAAV,EAAsBC,OAAtB,CAAJ;AACD,GAH0B,EAI3B,CAACH,IAAD,CAJ2B,CAA7B;AAOA,QAAMT,WAAW,GAAGR,WAAW,CAC7B,CAACmB,UAAD,EAAqBC,OAArB,KAA+C;AAC7CH,IAAAA,IAAI,CAAC,SAAD,EAAYE,UAAZ,EAAwBC,OAAxB,CAAJ;AACD,GAH4B,EAI7B,CAACH,IAAD,CAJ6B,CAA/B;AAOA,sBACE,QAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLZ,MAAAA,MADK;AAELC,MAAAA,OAFK;AAGLC,MAAAA,SAHK;AAILE,MAAAA,SAJK;AAKLD,MAAAA;AALK,KADT;AAAA,cASGK;AATH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA3DM;;IAAMD,a;;KAAAA,a","sourcesContent":["import {\n  createContext,\n  ReactNode,\n  useCallback,\n  useContext,\n  useState,\n} from 'react'\nimport { ALERT_TIME_MS } from '../constants/settings'\n\ntype AlertStatus = 'success' | 'error' | undefined\n\ntype ShowOptions = {\n  persist?: boolean\n  delayMs?: number\n  durationMs?: number\n  onClose?: () => void\n}\n\ntype AlertContextValue = {\n  status: AlertStatus\n  message: string | null\n  isVisible: boolean\n  showSuccess: (message: string, options?: ShowOptions) => void\n  showError: (message: string, options?: ShowOptions) => void\n}\n\nexport const AlertContext = createContext<AlertContextValue | null>({\n  status: 'success',\n  message: null,\n  isVisible: false,\n  showSuccess: () => null,\n  showError: () => null,\n})\nAlertContext.displayName = 'AlertContext'\n\nexport const useAlert = () => useContext(AlertContext) as AlertContextValue\n\ntype Props = {\n  children?: ReactNode\n}\n\nexport const AlertProvider = ({ children }: Props) => {\n  const [status, setStatus] = useState<AlertStatus>('success')\n  const [message, setMessage] = useState<string | null>(null)\n  const [isVisible, setIsVisible] = useState(false)\n\n  const show = useCallback(\n    (showStatus: AlertStatus, newMessage: string, options?: ShowOptions) => {\n      const {\n        delayMs = 0,\n        persist,\n        onClose,\n        durationMs = ALERT_TIME_MS,\n      } = options || {}\n\n      setTimeout(() => {\n        setStatus(showStatus)\n        setMessage(newMessage)\n        setIsVisible(true)\n\n        if (!persist) {\n          setTimeout(() => {\n            setIsVisible(false)\n            if (onClose) {\n              onClose()\n            }\n          }, durationMs)\n        }\n      }, delayMs)\n    },\n    [setStatus, setMessage, setIsVisible]\n  )\n\n  const showError = useCallback(\n    (newMessage: string, options?: ShowOptions) => {\n      show('error', newMessage, options)\n    },\n    [show]\n  )\n\n  const showSuccess = useCallback(\n    (newMessage: string, options?: ShowOptions) => {\n      show('success', newMessage, options)\n    },\n    [show]\n  )\n\n  return (\n    <AlertContext.Provider\n      value={{\n        status,\n        message,\n        isVisible,\n        showError,\n        showSuccess,\n      }}\n    >\n      {children}\n    </AlertContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}