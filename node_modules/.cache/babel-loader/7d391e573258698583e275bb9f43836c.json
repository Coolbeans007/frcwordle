{"ast":null,"code":"var _jsxFileName = \"/Users/ntwrkman/Desktop/react-wordle/src/components/grid/CurrentRow.tsx\";\nimport { Cell } from './Cell';\nimport { solution, unicodeSplit } from '../../lib/words';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CurrentRow = _ref => {\n  let {\n    guess,\n    className\n  } = _ref;\n  const splitGuess = unicodeSplit(guess);\n  const emptyCells = Array.from(Array(solution.length - splitGuess.length));\n  const classes = `flex justify-center mb-1 ${className}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes,\n    children: [splitGuess.map((letter, i) => /*#__PURE__*/_jsxDEV(Cell, {\n      value: letter\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)), emptyCells.map((_, i) => /*#__PURE__*/_jsxDEV(Cell, {}, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = CurrentRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentRow\");","map":{"version":3,"sources":["/Users/ntwrkman/Desktop/react-wordle/src/components/grid/CurrentRow.tsx"],"names":["Cell","solution","unicodeSplit","CurrentRow","guess","className","splitGuess","emptyCells","Array","from","length","classes","map","letter","i","_"],"mappings":";AAAA,SAASA,IAAT,QAAqB,QAArB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,iBAAvC;;AAOA,OAAO,MAAMC,UAAU,GAAG,QAAiC;AAAA,MAAhC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAgC;AACzD,QAAMC,UAAU,GAAGJ,YAAY,CAACE,KAAD,CAA/B;AACA,QAAMG,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACP,QAAQ,CAACS,MAAT,GAAkBJ,UAAU,CAACI,MAA9B,CAAhB,CAAnB;AACA,QAAMC,OAAO,GAAI,4BAA2BN,SAAU,EAAtD;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEM,OAAhB;AAAA,eACGL,UAAU,CAACM,GAAX,CAAe,CAACC,MAAD,EAASC,CAAT,kBACd,QAAC,IAAD;AAAc,MAAA,KAAK,EAAED;AAArB,OAAWC,CAAX;AAAA;AAAA;AAAA;AAAA,YADD,CADH,EAIGP,UAAU,CAACK,GAAX,CAAe,CAACG,CAAD,EAAID,CAAJ,kBACd,QAAC,IAAD,MAAWA,CAAX;AAAA;AAAA;AAAA;AAAA,YADD,CAJH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAfM;KAAMX,U","sourcesContent":["import { Cell } from './Cell'\nimport { solution, unicodeSplit } from '../../lib/words'\n\ntype Props = {\n  guess: string\n  className: string\n}\n\nexport const CurrentRow = ({ guess, className }: Props) => {\n  const splitGuess = unicodeSplit(guess)\n  const emptyCells = Array.from(Array(solution.length - splitGuess.length))\n  const classes = `flex justify-center mb-1 ${className}`\n\n  return (\n    <div className={classes}>\n      {splitGuess.map((letter, i) => (\n        <Cell key={i} value={letter} />\n      ))}\n      {emptyCells.map((_, i) => (\n        <Cell key={i} />\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}