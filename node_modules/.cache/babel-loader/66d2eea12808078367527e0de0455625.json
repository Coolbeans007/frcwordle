{"ast":null,"code":"import _objectSpread from\"/Users/ntwrkman/Desktop/react-wordle/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{MAX_CHALLENGES}from'../constants/settings';import{loadStatsFromLocalStorage,saveStatsToLocalStorage}from'./localStorage';// In stats array elements 0-5 are successes in 1-6 trys\nexport var addStatsForCompletedGame=function addStatsForCompletedGame(gameStats,count){// Count is number of incorrect guesses before end.\nvar stats=_objectSpread({},gameStats);stats.totalGames+=1;if(count>=MAX_CHALLENGES){// A fail situation\nstats.currentStreak=0;stats.gamesFailed+=1;}else{stats.winDistribution[count]+=1;stats.currentStreak+=1;if(stats.bestStreak<stats.currentStreak){stats.bestStreak=stats.currentStreak;}}stats.successRate=getSuccessRate(stats);saveStatsToLocalStorage(stats);return stats;};var defaultStats={winDistribution:Array.from(new Array(MAX_CHALLENGES),function(){return 0;}),gamesFailed:0,currentStreak:0,bestStreak:0,totalGames:0,successRate:0};export var loadStats=function loadStats(){return loadStatsFromLocalStorage()||defaultStats;};var getSuccessRate=function getSuccessRate(gameStats){var totalGames=gameStats.totalGames,gamesFailed=gameStats.gamesFailed;return Math.round(100*(totalGames-gamesFailed)/Math.max(totalGames,1));};","map":{"version":3,"sources":["/Users/ntwrkman/Desktop/react-wordle/src/lib/stats.ts"],"names":["MAX_CHALLENGES","loadStatsFromLocalStorage","saveStatsToLocalStorage","addStatsForCompletedGame","gameStats","count","stats","totalGames","currentStreak","gamesFailed","winDistribution","bestStreak","successRate","getSuccessRate","defaultStats","Array","from","loadStats","Math","round","max"],"mappings":"yHAAA,OAASA,cAAT,KAA+B,uBAA/B,CACA,OAEEC,yBAFF,CAGEC,uBAHF,KAIO,gBAJP,CAMA;AAEA,MAAO,IAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CACtCC,SADsC,CAEtCC,KAFsC,CAGnC,CACH;AACA,GAAMC,CAAAA,KAAK,kBAAQF,SAAR,CAAX,CAEAE,KAAK,CAACC,UAAN,EAAoB,CAApB,CAEA,GAAIF,KAAK,EAAIL,cAAb,CAA6B,CAC3B;AACAM,KAAK,CAACE,aAAN,CAAsB,CAAtB,CACAF,KAAK,CAACG,WAAN,EAAqB,CAArB,CACD,CAJD,IAIO,CACLH,KAAK,CAACI,eAAN,CAAsBL,KAAtB,GAAgC,CAAhC,CACAC,KAAK,CAACE,aAAN,EAAuB,CAAvB,CAEA,GAAIF,KAAK,CAACK,UAAN,CAAmBL,KAAK,CAACE,aAA7B,CAA4C,CAC1CF,KAAK,CAACK,UAAN,CAAmBL,KAAK,CAACE,aAAzB,CACD,CACF,CAEDF,KAAK,CAACM,WAAN,CAAoBC,cAAc,CAACP,KAAD,CAAlC,CAEAJ,uBAAuB,CAACI,KAAD,CAAvB,CACA,MAAOA,CAAAA,KAAP,CACD,CA1BM,CA4BP,GAAMQ,CAAAA,YAAuB,CAAG,CAC9BJ,eAAe,CAAEK,KAAK,CAACC,IAAN,CAAW,GAAID,CAAAA,KAAJ,CAAUf,cAAV,CAAX,CAAsC,iBAAM,EAAN,EAAtC,CADa,CAE9BS,WAAW,CAAE,CAFiB,CAG9BD,aAAa,CAAE,CAHe,CAI9BG,UAAU,CAAE,CAJkB,CAK9BJ,UAAU,CAAE,CALkB,CAM9BK,WAAW,CAAE,CANiB,CAAhC,CASA,MAAO,IAAMK,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAC7B,MAAOhB,CAAAA,yBAAyB,IAAMa,YAAtC,CACD,CAFM,CAIP,GAAMD,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACT,SAAD,CAA0B,CAC/C,GAAQG,CAAAA,UAAR,CAAoCH,SAApC,CAAQG,UAAR,CAAoBE,WAApB,CAAoCL,SAApC,CAAoBK,WAApB,CAEA,MAAOS,CAAAA,IAAI,CAACC,KAAL,CACJ,KAAOZ,UAAU,CAAGE,WAApB,CAAD,CAAqCS,IAAI,CAACE,GAAL,CAASb,UAAT,CAAqB,CAArB,CADhC,CAAP,CAGD,CAND","sourcesContent":["import { MAX_CHALLENGES } from '../constants/settings'\nimport {\n  GameStats,\n  loadStatsFromLocalStorage,\n  saveStatsToLocalStorage,\n} from './localStorage'\n\n// In stats array elements 0-5 are successes in 1-6 trys\n\nexport const addStatsForCompletedGame = (\n  gameStats: GameStats,\n  count: number\n) => {\n  // Count is number of incorrect guesses before end.\n  const stats = { ...gameStats }\n\n  stats.totalGames += 1\n\n  if (count >= MAX_CHALLENGES) {\n    // A fail situation\n    stats.currentStreak = 0\n    stats.gamesFailed += 1\n  } else {\n    stats.winDistribution[count] += 1\n    stats.currentStreak += 1\n\n    if (stats.bestStreak < stats.currentStreak) {\n      stats.bestStreak = stats.currentStreak\n    }\n  }\n\n  stats.successRate = getSuccessRate(stats)\n\n  saveStatsToLocalStorage(stats)\n  return stats\n}\n\nconst defaultStats: GameStats = {\n  winDistribution: Array.from(new Array(MAX_CHALLENGES), () => 0),\n  gamesFailed: 0,\n  currentStreak: 0,\n  bestStreak: 0,\n  totalGames: 0,\n  successRate: 0,\n}\n\nexport const loadStats = () => {\n  return loadStatsFromLocalStorage() || defaultStats\n}\n\nconst getSuccessRate = (gameStats: GameStats) => {\n  const { totalGames, gamesFailed } = gameStats\n\n  return Math.round(\n    (100 * (totalGames - gamesFailed)) / Math.max(totalGames, 1)\n  )\n}\n"]},"metadata":{},"sourceType":"module"}