{"ast":null,"code":"import{getGuessStatuses}from'./statuses';import{solutionIndex,unicodeSplit}from'./words';import{GAME_TITLE}from'../constants/strings';import{MAX_CHALLENGES}from'../constants/settings';import{UAParser}from'ua-parser-js';var webShareApiDeviceTypes=['mobile','smarttv','wearable'];var parser=new UAParser();var browser=parser.getBrowser();var device=parser.getDevice();export var shareStatus=function shareStatus(solution,guesses,lost,isHardMode,isDarkMode,isHighContrastMode,handleShareToClipboard){var textToShare=\"\".concat(GAME_TITLE,\" \").concat(solutionIndex,\" \").concat(lost?'X':guesses.length,\"/\").concat(MAX_CHALLENGES).concat(isHardMode?'*':'',\"\\n\\n\")+generateEmojiGrid(solution,guesses,getEmojiTiles(isDarkMode,isHighContrastMode));var shareData={text:textToShare};var shareSuccess=false;try{if(attemptShare(shareData)){navigator.share(shareData);shareSuccess=true;}}catch(error){shareSuccess=false;}if(!shareSuccess){navigator.clipboard.writeText(textToShare);handleShareToClipboard();}};export var generateEmojiGrid=function generateEmojiGrid(solution,guesses,tiles){return guesses.map(function(guess){var status=getGuessStatuses(solution,guess);var splitGuess=unicodeSplit(guess);return splitGuess.map(function(_,i){switch(status[i]){case'correct':return tiles[0];case'present':return tiles[1];default:return tiles[2];}}).join('');}).join('\\n');};var attemptShare=function attemptShare(shareData){var _browser$name,_device$type;return(// Deliberately exclude Firefox Mobile, because its Web Share API isn't working correctly\n((_browser$name=browser.name)===null||_browser$name===void 0?void 0:_browser$name.toUpperCase().indexOf('FIREFOX'))===-1&&webShareApiDeviceTypes.indexOf((_device$type=device.type)!==null&&_device$type!==void 0?_device$type:'')!==-1&&navigator.canShare&&navigator.canShare(shareData)&&navigator.share);};var getEmojiTiles=function getEmojiTiles(isDarkMode,isHighContrastMode){var tiles=[];tiles.push(isHighContrastMode?'ğŸŸ§':'ğŸŸ©');tiles.push(isHighContrastMode?'ğŸŸ¦':'ğŸŸ¨');tiles.push(isDarkMode?'â¬›':'â¬œ');return tiles;};","map":{"version":3,"sources":["/Users/ntwrkman/Desktop/react-wordle/src/lib/share.ts"],"names":["getGuessStatuses","solutionIndex","unicodeSplit","GAME_TITLE","MAX_CHALLENGES","UAParser","webShareApiDeviceTypes","parser","browser","getBrowser","device","getDevice","shareStatus","solution","guesses","lost","isHardMode","isDarkMode","isHighContrastMode","handleShareToClipboard","textToShare","length","generateEmojiGrid","getEmojiTiles","shareData","text","shareSuccess","attemptShare","navigator","share","error","clipboard","writeText","tiles","map","guess","status","splitGuess","_","i","join","name","toUpperCase","indexOf","type","canShare","push"],"mappings":"AAAA,OAASA,gBAAT,KAAiC,YAAjC,CACA,OAASC,aAAT,CAAwBC,YAAxB,KAA4C,SAA5C,CACA,OAASC,UAAT,KAA2B,sBAA3B,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAASC,QAAT,KAAyB,cAAzB,CAEA,GAAMC,CAAAA,sBAAgC,CAAG,CAAC,QAAD,CAAW,SAAX,CAAsB,UAAtB,CAAzC,CACA,GAAMC,CAAAA,MAAM,CAAG,GAAIF,CAAAA,QAAJ,EAAf,CACA,GAAMG,CAAAA,OAAO,CAAGD,MAAM,CAACE,UAAP,EAAhB,CACA,GAAMC,CAAAA,MAAM,CAAGH,MAAM,CAACI,SAAP,EAAf,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CACzBC,QADyB,CAEzBC,OAFyB,CAGzBC,IAHyB,CAIzBC,UAJyB,CAKzBC,UALyB,CAMzBC,kBANyB,CAOzBC,sBAPyB,CAQtB,CACH,GAAMC,CAAAA,WAAW,CACf,UAAGjB,UAAH,aAAiBF,aAAjB,aACEc,IAAI,CAAG,GAAH,CAASD,OAAO,CAACO,MADvB,aAEIjB,cAFJ,SAEqBY,UAAU,CAAG,GAAH,CAAS,EAFxC,SAGAM,iBAAiB,CACfT,QADe,CAEfC,OAFe,CAGfS,aAAa,CAACN,UAAD,CAAaC,kBAAb,CAHE,CAJnB,CAUA,GAAMM,CAAAA,SAAS,CAAG,CAAEC,IAAI,CAAEL,WAAR,CAAlB,CAEA,GAAIM,CAAAA,YAAY,CAAG,KAAnB,CAEA,GAAI,CACF,GAAIC,YAAY,CAACH,SAAD,CAAhB,CAA6B,CAC3BI,SAAS,CAACC,KAAV,CAAgBL,SAAhB,EACAE,YAAY,CAAG,IAAf,CACD,CACF,CAAC,MAAOI,KAAP,CAAc,CACdJ,YAAY,CAAG,KAAf,CACD,CAED,GAAI,CAACA,YAAL,CAAmB,CACjBE,SAAS,CAACG,SAAV,CAAoBC,SAApB,CAA8BZ,WAA9B,EACAD,sBAAsB,GACvB,CACF,CApCM,CAsCP,MAAO,IAAMG,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAC/BT,QAD+B,CAE/BC,OAF+B,CAG/BmB,KAH+B,CAI5B,CACH,MAAOnB,CAAAA,OAAO,CACXoB,GADI,CACA,SAACC,KAAD,CAAW,CACd,GAAMC,CAAAA,MAAM,CAAGpC,gBAAgB,CAACa,QAAD,CAAWsB,KAAX,CAA/B,CACA,GAAME,CAAAA,UAAU,CAAGnC,YAAY,CAACiC,KAAD,CAA/B,CAEA,MAAOE,CAAAA,UAAU,CACdH,GADI,CACA,SAACI,CAAD,CAAIC,CAAJ,CAAU,CACb,OAAQH,MAAM,CAACG,CAAD,CAAd,EACE,IAAK,SAAL,CACE,MAAON,CAAAA,KAAK,CAAC,CAAD,CAAZ,CACF,IAAK,SAAL,CACE,MAAOA,CAAAA,KAAK,CAAC,CAAD,CAAZ,CACF,QACE,MAAOA,CAAAA,KAAK,CAAC,CAAD,CAAZ,CANJ,CAQD,CAVI,EAWJO,IAXI,CAWC,EAXD,CAAP,CAYD,CAjBI,EAkBJA,IAlBI,CAkBC,IAlBD,CAAP,CAmBD,CAxBM,CA0BP,GAAMb,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACH,SAAD,CAAuB,gCAC1C,MACE;AACA,gBAAAhB,OAAO,CAACiC,IAAR,sDAAcC,WAAd,GAA4BC,OAA5B,CAAoC,SAApC,KAAmD,CAAC,CAApD,EACArC,sBAAsB,CAACqC,OAAvB,eAA+BjC,MAAM,CAACkC,IAAtC,6CAA8C,EAA9C,IAAsD,CAAC,CADvD,EAEAhB,SAAS,CAACiB,QAFV,EAGAjB,SAAS,CAACiB,QAAV,CAAmBrB,SAAnB,CAHA,EAIAI,SAAS,CAACC,KANZ,EAQD,CATD,CAWA,GAAMN,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACN,UAAD,CAAsBC,kBAAtB,CAAsD,CAC1E,GAAIe,CAAAA,KAAe,CAAG,EAAtB,CACAA,KAAK,CAACa,IAAN,CAAW5B,kBAAkB,CAAG,IAAH,CAAU,IAAvC,EACAe,KAAK,CAACa,IAAN,CAAW5B,kBAAkB,CAAG,IAAH,CAAU,IAAvC,EACAe,KAAK,CAACa,IAAN,CAAW7B,UAAU,CAAG,GAAH,CAAS,GAA9B,EACA,MAAOgB,CAAAA,KAAP,CACD,CAND","sourcesContent":["import { getGuessStatuses } from './statuses'\nimport { solutionIndex, unicodeSplit } from './words'\nimport { GAME_TITLE } from '../constants/strings'\nimport { MAX_CHALLENGES } from '../constants/settings'\nimport { UAParser } from 'ua-parser-js'\n\nconst webShareApiDeviceTypes: string[] = ['mobile', 'smarttv', 'wearable']\nconst parser = new UAParser()\nconst browser = parser.getBrowser()\nconst device = parser.getDevice()\n\nexport const shareStatus = (\n  solution: string,\n  guesses: string[],\n  lost: boolean,\n  isHardMode: boolean,\n  isDarkMode: boolean,\n  isHighContrastMode: boolean,\n  handleShareToClipboard: () => void\n) => {\n  const textToShare =\n    `${GAME_TITLE} ${solutionIndex} ${\n      lost ? 'X' : guesses.length\n    }/${MAX_CHALLENGES}${isHardMode ? '*' : ''}\\n\\n` +\n    generateEmojiGrid(\n      solution,\n      guesses,\n      getEmojiTiles(isDarkMode, isHighContrastMode)\n    )\n\n  const shareData = { text: textToShare }\n\n  let shareSuccess = false\n\n  try {\n    if (attemptShare(shareData)) {\n      navigator.share(shareData)\n      shareSuccess = true\n    }\n  } catch (error) {\n    shareSuccess = false\n  }\n\n  if (!shareSuccess) {\n    navigator.clipboard.writeText(textToShare)\n    handleShareToClipboard()\n  }\n}\n\nexport const generateEmojiGrid = (\n  solution: string,\n  guesses: string[],\n  tiles: string[]\n) => {\n  return guesses\n    .map((guess) => {\n      const status = getGuessStatuses(solution, guess)\n      const splitGuess = unicodeSplit(guess)\n\n      return splitGuess\n        .map((_, i) => {\n          switch (status[i]) {\n            case 'correct':\n              return tiles[0]\n            case 'present':\n              return tiles[1]\n            default:\n              return tiles[2]\n          }\n        })\n        .join('')\n    })\n    .join('\\n')\n}\n\nconst attemptShare = (shareData: object) => {\n  return (\n    // Deliberately exclude Firefox Mobile, because its Web Share API isn't working correctly\n    browser.name?.toUpperCase().indexOf('FIREFOX') === -1 &&\n    webShareApiDeviceTypes.indexOf(device.type ?? '') !== -1 &&\n    navigator.canShare &&\n    navigator.canShare(shareData) &&\n    navigator.share\n  )\n}\n\nconst getEmojiTiles = (isDarkMode: boolean, isHighContrastMode: boolean) => {\n  let tiles: string[] = []\n  tiles.push(isHighContrastMode ? 'ğŸŸ§' : 'ğŸŸ©')\n  tiles.push(isHighContrastMode ? 'ğŸŸ¦' : 'ğŸŸ¨')\n  tiles.push(isDarkMode ? 'â¬›' : 'â¬œ')\n  return tiles\n}\n"]},"metadata":{},"sourceType":"module"}