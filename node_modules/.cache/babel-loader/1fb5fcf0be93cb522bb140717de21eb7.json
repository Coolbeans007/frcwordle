{"ast":null,"code":"import{Cell}from'./Cell';import{solution,unicodeSplit}from'../../lib/words';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var CurrentRow=function CurrentRow(_ref){var guess=_ref.guess,className=_ref.className;var splitGuess=unicodeSplit(guess);var emptyCells=Array.from(Array(solution.length-splitGuess.length));var classes=\"flex justify-center mb-1 \".concat(className);return/*#__PURE__*/_jsxs(\"div\",{className:classes,children:[splitGuess.map(function(letter,i){return/*#__PURE__*/_jsx(Cell,{value:letter},i);}),emptyCells.map(function(_,i){return/*#__PURE__*/_jsx(Cell,{},i);})]});};","map":{"version":3,"sources":["/Users/ntwrkman/Desktop/frcwordl/src/components/grid/CurrentRow.tsx"],"names":["Cell","solution","unicodeSplit","CurrentRow","guess","className","splitGuess","emptyCells","Array","from","length","classes","map","letter","i","_"],"mappings":"AAAA,OAASA,IAAT,KAAqB,QAArB,CACA,OAASC,QAAT,CAAmBC,YAAnB,KAAuC,iBAAvC,C,wFAOA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAAiC,IAA9BC,CAAAA,KAA8B,MAA9BA,KAA8B,CAAvBC,SAAuB,MAAvBA,SAAuB,CACzD,GAAMC,CAAAA,UAAU,CAAGJ,YAAY,CAACE,KAAD,CAA/B,CACA,GAAMG,CAAAA,UAAU,CAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACP,QAAQ,CAACS,MAAT,CAAkBJ,UAAU,CAACI,MAA9B,CAAhB,CAAnB,CACA,GAAMC,CAAAA,OAAO,oCAA+BN,SAA/B,CAAb,CAEA,mBACE,aAAK,SAAS,CAAEM,OAAhB,WACGL,UAAU,CAACM,GAAX,CAAe,SAACC,MAAD,CAASC,CAAT,qBACd,KAAC,IAAD,EAAc,KAAK,CAAED,MAArB,EAAWC,CAAX,CADc,EAAf,CADH,CAIGP,UAAU,CAACK,GAAX,CAAe,SAACG,CAAD,CAAID,CAAJ,qBACd,KAAC,IAAD,IAAWA,CAAX,CADc,EAAf,CAJH,GADF,CAUD,CAfM","sourcesContent":["import { Cell } from './Cell'\nimport { solution, unicodeSplit } from '../../lib/words'\n\ntype Props = {\n  guess: string\n  className: string\n}\n\nexport const CurrentRow = ({ guess, className }: Props) => {\n  const splitGuess = unicodeSplit(guess)\n  const emptyCells = Array.from(Array(solution.length - splitGuess.length))\n  const classes = `flex justify-center mb-1 ${className}`\n\n  return (\n    <div className={classes}>\n      {splitGuess.map((letter, i) => (\n        <Cell key={i} value={letter} />\n      ))}\n      {emptyCells.map((_, i) => (\n        <Cell key={i} />\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}