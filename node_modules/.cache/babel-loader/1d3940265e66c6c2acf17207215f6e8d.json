{"ast":null,"code":"import { WORDS } from '../constants/wordlist';\nimport { VALID_GUESSES } from '../constants/validGuesses';\nimport { WRONG_SPOT_MESSAGE, NOT_CONTAINED_MESSAGE } from '../constants/strings';\nimport { getGuessStatuses } from './statuses';\nimport { default as GraphemeSplitter } from 'grapheme-splitter';\nexport const isWordInWordList = word => {\n  return WORDS.includes(localeAwareLowerCase(word)) || VALID_GUESSES.includes(localeAwareLowerCase(word));\n};\nexport const isWinningWord = word => {\n  return solution === word;\n}; // build a set of previously revealed letters - present and correct\n// guess must use correct letters in that space and any other revealed letters\n// also check if all revealed instances of a letter are used (i.e. two C's)\n\nexport const findFirstUnusedReveal = (word, guesses) => {\n  if (guesses.length === 0) {\n    return false;\n  }\n\n  const lettersLeftArray = new Array();\n  const guess = guesses[guesses.length - 1];\n  const statuses = getGuessStatuses(solution, guess);\n  const splitWord = unicodeSplit(word);\n  const splitGuess = unicodeSplit(guess);\n\n  for (let i = 0; i < splitGuess.length; i++) {\n    if (statuses[i] === 'correct' || statuses[i] === 'present') {\n      lettersLeftArray.push(splitGuess[i]);\n    }\n\n    if (statuses[i] === 'correct' && splitWord[i] !== splitGuess[i]) {\n      return WRONG_SPOT_MESSAGE(splitGuess[i], i + 1);\n    }\n  } // check for the first unused letter, taking duplicate letters\n  // into account - see issue #198\n\n\n  let n;\n\n  for (const letter of splitWord) {\n    n = lettersLeftArray.indexOf(letter);\n\n    if (n !== -1) {\n      lettersLeftArray.splice(n, 1);\n    }\n  }\n\n  if (lettersLeftArray.length > 0) {\n    return NOT_CONTAINED_MESSAGE(lettersLeftArray[0]);\n  }\n\n  return false;\n};\nexport const unicodeSplit = word => {\n  return new GraphemeSplitter().splitGraphemes(word);\n};\nexport const unicodeLength = word => {\n  return unicodeSplit(word).length;\n};\nexport const localeAwareLowerCase = text => {\n  return process.env.REACT_APP_LOCALE_STRING ? text.toLocaleLowerCase(process.env.REACT_APP_LOCALE_STRING) : text.toLowerCase();\n};\nexport const localeAwareUpperCase = text => {\n  return process.env.REACT_APP_LOCALE_STRING ? text.toLocaleUpperCase(process.env.REACT_APP_LOCALE_STRING) : text.toUpperCase();\n};\nexport const getWordOfDay = () => {\n  // January 1, 2022 Game Epoch\n  //const epoch = new Date(2022, 0)\n  //const start = new Date(epoch)\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  let index = Math.random();\n  const nextDay = new Date(today);\n  nextDay.setDate(today.getDate() + 1);\n  return {\n    solution: localeAwareUpperCase(WORDS[index % WORDS.length]),\n    solutionIndex: index // tomorrow: nextDay.valueOf(),\n\n  };\n};\nexport const {\n  solution,\n  solutionIndex\n} = getWordOfDay();","map":{"version":3,"sources":["/Users/ntwrkman/Desktop/react-wordle/src/lib/words.ts"],"names":["WORDS","VALID_GUESSES","WRONG_SPOT_MESSAGE","NOT_CONTAINED_MESSAGE","getGuessStatuses","default","GraphemeSplitter","isWordInWordList","word","includes","localeAwareLowerCase","isWinningWord","solution","findFirstUnusedReveal","guesses","length","lettersLeftArray","Array","guess","statuses","splitWord","unicodeSplit","splitGuess","i","push","n","letter","indexOf","splice","splitGraphemes","unicodeLength","text","process","env","REACT_APP_LOCALE_STRING","toLocaleLowerCase","toLowerCase","localeAwareUpperCase","toLocaleUpperCase","toUpperCase","getWordOfDay","today","Date","setHours","index","Math","random","nextDay","setDate","getDate","solutionIndex"],"mappings":"AAAA,SAASA,KAAT,QAAsB,uBAAtB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,QAA0D,sBAA1D;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,OAAO,IAAIC,gBAApB,QAA4C,mBAA5C;AAGA,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,IAAkB;AAChD,SACER,KAAK,CAACS,QAAN,CAAeC,oBAAoB,CAACF,IAAD,CAAnC,KACAP,aAAa,CAACQ,QAAd,CAAuBC,oBAAoB,CAACF,IAAD,CAA3C,CAFF;AAID,CALM;AAOP,OAAO,MAAMG,aAAa,GAAIH,IAAD,IAAkB;AAC7C,SAAOI,QAAQ,KAAKJ,IAApB;AACD,CAFM,C,CAIP;AACA;AACA;;AACA,OAAO,MAAMK,qBAAqB,GAAG,CAACL,IAAD,EAAeM,OAAf,KAAqC;AACxE,MAAIA,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,WAAO,KAAP;AACD;;AAED,QAAMC,gBAAgB,GAAG,IAAIC,KAAJ,EAAzB;AACA,QAAMC,KAAK,GAAGJ,OAAO,CAACA,OAAO,CAACC,MAAR,GAAiB,CAAlB,CAArB;AACA,QAAMI,QAAQ,GAAGf,gBAAgB,CAACQ,QAAD,EAAWM,KAAX,CAAjC;AACA,QAAME,SAAS,GAAGC,YAAY,CAACb,IAAD,CAA9B;AACA,QAAMc,UAAU,GAAGD,YAAY,CAACH,KAAD,CAA/B;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACP,MAA/B,EAAuCQ,CAAC,EAAxC,EAA4C;AAC1C,QAAIJ,QAAQ,CAACI,CAAD,CAAR,KAAgB,SAAhB,IAA6BJ,QAAQ,CAACI,CAAD,CAAR,KAAgB,SAAjD,EAA4D;AAC1DP,MAAAA,gBAAgB,CAACQ,IAAjB,CAAsBF,UAAU,CAACC,CAAD,CAAhC;AACD;;AACD,QAAIJ,QAAQ,CAACI,CAAD,CAAR,KAAgB,SAAhB,IAA6BH,SAAS,CAACG,CAAD,CAAT,KAAiBD,UAAU,CAACC,CAAD,CAA5D,EAAiE;AAC/D,aAAOrB,kBAAkB,CAACoB,UAAU,CAACC,CAAD,CAAX,EAAgBA,CAAC,GAAG,CAApB,CAAzB;AACD;AACF,GAlBuE,CAoBxE;AACA;;;AACA,MAAIE,CAAJ;;AACA,OAAK,MAAMC,MAAX,IAAqBN,SAArB,EAAgC;AAC9BK,IAAAA,CAAC,GAAGT,gBAAgB,CAACW,OAAjB,CAAyBD,MAAzB,CAAJ;;AACA,QAAID,CAAC,KAAK,CAAC,CAAX,EAAc;AACZT,MAAAA,gBAAgB,CAACY,MAAjB,CAAwBH,CAAxB,EAA2B,CAA3B;AACD;AACF;;AAED,MAAIT,gBAAgB,CAACD,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,WAAOZ,qBAAqB,CAACa,gBAAgB,CAAC,CAAD,CAAjB,CAA5B;AACD;;AACD,SAAO,KAAP;AACD,CAlCM;AAoCP,OAAO,MAAMK,YAAY,GAAIb,IAAD,IAAkB;AAC5C,SAAO,IAAIF,gBAAJ,GAAuBuB,cAAvB,CAAsCrB,IAAtC,CAAP;AACD,CAFM;AAIP,OAAO,MAAMsB,aAAa,GAAItB,IAAD,IAAkB;AAC7C,SAAOa,YAAY,CAACb,IAAD,CAAZ,CAAmBO,MAA1B;AACD,CAFM;AAIP,OAAO,MAAML,oBAAoB,GAAIqB,IAAD,IAAkB;AACpD,SAAOC,OAAO,CAACC,GAAR,CAAYC,uBAAZ,GACHH,IAAI,CAACI,iBAAL,CAAuBH,OAAO,CAACC,GAAR,CAAYC,uBAAnC,CADG,GAEHH,IAAI,CAACK,WAAL,EAFJ;AAGD,CAJM;AAMP,OAAO,MAAMC,oBAAoB,GAAIN,IAAD,IAAkB;AACpD,SAAOC,OAAO,CAACC,GAAR,CAAYC,uBAAZ,GACHH,IAAI,CAACO,iBAAL,CAAuBN,OAAO,CAACC,GAAR,CAAYC,uBAAnC,CADG,GAEHH,IAAI,CAACQ,WAAL,EAFJ;AAGD,CAJM;AAMP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAChC;AACA;AACA;AACA,QAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACAD,EAAAA,KAAK,CAACE,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACA,MAAIC,KAAK,GAAGC,IAAI,CAACC,MAAL,EAAZ;AAGA,QAAMC,OAAO,GAAG,IAAIL,IAAJ,CAASD,KAAT,CAAhB;AACAM,EAAAA,OAAO,CAACC,OAAR,CAAgBP,KAAK,CAACQ,OAAN,KAAkB,CAAlC;AAEA,SAAO;AACLrC,IAAAA,QAAQ,EAAEyB,oBAAoB,CAACrC,KAAK,CAAC4C,KAAK,GAAG5C,KAAK,CAACe,MAAf,CAAN,CADzB;AAELmC,IAAAA,aAAa,EAAEN,KAFV,CAGP;;AAHO,GAAP;AAKD,CAjBM;AAmBP,OAAO,MAAM;AAAEhC,EAAAA,QAAF;AAAYsC,EAAAA;AAAZ,IAA6BV,YAAY,EAA/C","sourcesContent":["import { WORDS } from '../constants/wordlist'\nimport { VALID_GUESSES } from '../constants/validGuesses'\nimport { WRONG_SPOT_MESSAGE, NOT_CONTAINED_MESSAGE } from '../constants/strings'\nimport { getGuessStatuses } from './statuses'\nimport { default as GraphemeSplitter } from 'grapheme-splitter'\n\n\nexport const isWordInWordList = (word: string) => {\n  return (\n    WORDS.includes(localeAwareLowerCase(word)) ||\n    VALID_GUESSES.includes(localeAwareLowerCase(word))\n  )\n}\n\nexport const isWinningWord = (word: string) => {\n  return solution === word\n}\n\n// build a set of previously revealed letters - present and correct\n// guess must use correct letters in that space and any other revealed letters\n// also check if all revealed instances of a letter are used (i.e. two C's)\nexport const findFirstUnusedReveal = (word: string, guesses: string[]) => {\n  if (guesses.length === 0) {\n    return false\n  }\n\n  const lettersLeftArray = new Array<string>()\n  const guess = guesses[guesses.length - 1]\n  const statuses = getGuessStatuses(solution, guess)\n  const splitWord = unicodeSplit(word)\n  const splitGuess = unicodeSplit(guess)\n\n  for (let i = 0; i < splitGuess.length; i++) {\n    if (statuses[i] === 'correct' || statuses[i] === 'present') {\n      lettersLeftArray.push(splitGuess[i])\n    }\n    if (statuses[i] === 'correct' && splitWord[i] !== splitGuess[i]) {\n      return WRONG_SPOT_MESSAGE(splitGuess[i], i + 1)\n    }\n  }\n\n  // check for the first unused letter, taking duplicate letters\n  // into account - see issue #198\n  let n\n  for (const letter of splitWord) {\n    n = lettersLeftArray.indexOf(letter)\n    if (n !== -1) {\n      lettersLeftArray.splice(n, 1)\n    }\n  }\n\n  if (lettersLeftArray.length > 0) {\n    return NOT_CONTAINED_MESSAGE(lettersLeftArray[0])\n  }\n  return false\n}\n\nexport const unicodeSplit = (word: string) => {\n  return new GraphemeSplitter().splitGraphemes(word)\n}\n\nexport const unicodeLength = (word: string) => {\n  return unicodeSplit(word).length\n}\n\nexport const localeAwareLowerCase = (text: string) => {\n  return process.env.REACT_APP_LOCALE_STRING\n    ? text.toLocaleLowerCase(process.env.REACT_APP_LOCALE_STRING)\n    : text.toLowerCase()\n}\n\nexport const localeAwareUpperCase = (text: string) => {\n  return process.env.REACT_APP_LOCALE_STRING\n    ? text.toLocaleUpperCase(process.env.REACT_APP_LOCALE_STRING)\n    : text.toUpperCase()\n}\n\nexport const getWordOfDay = () => {\n  // January 1, 2022 Game Epoch\n  //const epoch = new Date(2022, 0)\n  //const start = new Date(epoch)\n  const today = new Date()\n  today.setHours(0, 0, 0, 0)\n  let index = Math.random();\n\n\n  const nextDay = new Date(today)\n  nextDay.setDate(today.getDate() + 1)\n\n  return {\n    solution: localeAwareUpperCase(WORDS[index % WORDS.length]),\n    solutionIndex: index,\n  // tomorrow: nextDay.valueOf(),\n  }\n}\n\nexport const { solution, solutionIndex} = getWordOfDay()\n"]},"metadata":{},"sourceType":"module"}