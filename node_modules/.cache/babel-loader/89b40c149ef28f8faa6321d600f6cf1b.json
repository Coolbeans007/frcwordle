{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/ntwrkman/Desktop/react-wordle/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import{WORDS}from'../constants/wordlist';import{VALID_GUESSES}from'../constants/validGuesses';import{WRONG_SPOT_MESSAGE,NOT_CONTAINED_MESSAGE}from'../constants/strings';import{getGuessStatuses}from'./statuses';import{default as GraphemeSplitter}from'grapheme-splitter';export var isWordInWordList=function isWordInWordList(word){return WORDS.includes(localeAwareLowerCase(word))||VALID_GUESSES.includes(localeAwareLowerCase(word));};export var isWinningWord=function isWinningWord(word){return solution===word;};// build a set of previously revealed letters - present and correct\n// guess must use correct letters in that space and any other revealed letters\n// also check if all revealed instances of a letter are used (i.e. two C's)\nexport var findFirstUnusedReveal=function findFirstUnusedReveal(word,guesses){if(guesses.length===0){return false;}var lettersLeftArray=new Array();var guess=guesses[guesses.length-1];var statuses=getGuessStatuses(solution,guess);var splitWord=unicodeSplit(word);var splitGuess=unicodeSplit(guess);for(var i=0;i<splitGuess.length;i++){if(statuses[i]==='correct'||statuses[i]==='present'){lettersLeftArray.push(splitGuess[i]);}if(statuses[i]==='correct'&&splitWord[i]!==splitGuess[i]){return WRONG_SPOT_MESSAGE(splitGuess[i],i+1);}}// check for the first unused letter, taking duplicate letters\n// into account - see issue #198\nvar n;var _iterator=_createForOfIteratorHelper(splitWord),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var letter=_step.value;n=lettersLeftArray.indexOf(letter);if(n!==-1){lettersLeftArray.splice(n,1);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}if(lettersLeftArray.length>0){return NOT_CONTAINED_MESSAGE(lettersLeftArray[0]);}return false;};export var unicodeSplit=function unicodeSplit(word){return new GraphemeSplitter().splitGraphemes(word);};export var unicodeLength=function unicodeLength(word){return unicodeSplit(word).length;};export var localeAwareLowerCase=function localeAwareLowerCase(text){return process.env.REACT_APP_LOCALE_STRING?text.toLocaleLowerCase(process.env.REACT_APP_LOCALE_STRING):text.toLowerCase();};export var localeAwareUpperCase=function localeAwareUpperCase(text){return process.env.REACT_APP_LOCALE_STRING?text.toLocaleUpperCase(process.env.REACT_APP_LOCALE_STRING):text.toUpperCase();};export var getWordOfDay=function getWordOfDay(){// January 1, 2022 Game Epoch\n//const epoch = new Date(2022, 0)\n//const start = new Date(epoch)\nvar today=new Date();today.setHours(0,0,0,0);var index=Math.floor(Math.random()*9999);var nextDay=new Date(today);nextDay.setDate(today.getDate()+1);return{solution:localeAwareUpperCase(WORDS[index%WORDS.length]),solutionIndex:index// tomorrow: nextDay.valueOf(),\n};};var _getWordOfDay=getWordOfDay(),solution=_getWordOfDay.solution,solutionIndex=_getWordOfDay.solutionIndex;export{solution,solutionIndex};","map":{"version":3,"sources":["/Users/ntwrkman/Desktop/react-wordle/src/lib/words.ts"],"names":["WORDS","VALID_GUESSES","WRONG_SPOT_MESSAGE","NOT_CONTAINED_MESSAGE","getGuessStatuses","default","GraphemeSplitter","isWordInWordList","word","includes","localeAwareLowerCase","isWinningWord","solution","findFirstUnusedReveal","guesses","length","lettersLeftArray","Array","guess","statuses","splitWord","unicodeSplit","splitGuess","i","push","n","letter","indexOf","splice","splitGraphemes","unicodeLength","text","process","env","REACT_APP_LOCALE_STRING","toLocaleLowerCase","toLowerCase","localeAwareUpperCase","toLocaleUpperCase","toUpperCase","getWordOfDay","today","Date","setHours","index","Math","floor","random","nextDay","setDate","getDate","solutionIndex"],"mappings":"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","sourcesContent":["import { WORDS } from '../constants/wordlist'\nimport { VALID_GUESSES } from '../constants/validGuesses'\nimport { WRONG_SPOT_MESSAGE, NOT_CONTAINED_MESSAGE } from '../constants/strings'\nimport { getGuessStatuses } from './statuses'\nimport { default as GraphemeSplitter } from 'grapheme-splitter'\n\nexport const isWordInWordList = (word: string) => {\n  return (\n    WORDS.includes(localeAwareLowerCase(word)) ||\n    VALID_GUESSES.includes(localeAwareLowerCase(word))\n  )\n}\n\nexport const isWinningWord = (word: string) => {\n  return solution === word\n}\n\n// build a set of previously revealed letters - present and correct\n// guess must use correct letters in that space and any other revealed letters\n// also check if all revealed instances of a letter are used (i.e. two C's)\nexport const findFirstUnusedReveal = (word: string, guesses: string[]) => {\n  if (guesses.length === 0) {\n    return false\n  }\n\n  const lettersLeftArray = new Array<string>()\n  const guess = guesses[guesses.length - 1]\n  const statuses = getGuessStatuses(solution, guess)\n  const splitWord = unicodeSplit(word)\n  const splitGuess = unicodeSplit(guess)\n\n  for (let i = 0; i < splitGuess.length; i++) {\n    if (statuses[i] === 'correct' || statuses[i] === 'present') {\n      lettersLeftArray.push(splitGuess[i])\n    }\n    if (statuses[i] === 'correct' && splitWord[i] !== splitGuess[i]) {\n      return WRONG_SPOT_MESSAGE(splitGuess[i], i + 1)\n    }\n  }\n\n  // check for the first unused letter, taking duplicate letters\n  // into account - see issue #198\n  let n\n  for (const letter of splitWord) {\n    n = lettersLeftArray.indexOf(letter)\n    if (n !== -1) {\n      lettersLeftArray.splice(n, 1)\n    }\n  }\n\n  if (lettersLeftArray.length > 0) {\n    return NOT_CONTAINED_MESSAGE(lettersLeftArray[0])\n  }\n  return false\n}\n\nexport const unicodeSplit = (word: string) => {\n  return new GraphemeSplitter().splitGraphemes(word)\n}\n\nexport const unicodeLength = (word: string) => {\n  return unicodeSplit(word).length\n}\n\nexport const localeAwareLowerCase = (text: string) => {\n  return process.env.REACT_APP_LOCALE_STRING\n    ? text.toLocaleLowerCase(process.env.REACT_APP_LOCALE_STRING)\n    : text.toLowerCase()\n}\n\nexport const localeAwareUpperCase = (text: string) => {\n  return process.env.REACT_APP_LOCALE_STRING\n    ? text.toLocaleUpperCase(process.env.REACT_APP_LOCALE_STRING)\n    : text.toUpperCase()\n}\n\nexport const getWordOfDay = () => {\n  // January 1, 2022 Game Epoch\n  //const epoch = new Date(2022, 0)\n  //const start = new Date(epoch)\n  const today = new Date()\n  today.setHours(0, 0, 0, 0)\n  let index = Math.floor(Math.random() * 9999)\n\n  const nextDay = new Date(today)\n  nextDay.setDate(today.getDate() + 1)\n\n  return {\n    solution: localeAwareUpperCase(WORDS[index % WORDS.length]),\n    solutionIndex: index,\n    // tomorrow: nextDay.valueOf(),\n  }\n}\n\nexport const { solution, solutionIndex } = getWordOfDay()\n"]},"metadata":{},"sourceType":"module"}